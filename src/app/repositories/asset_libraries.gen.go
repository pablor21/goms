// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package repositories

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"github.com/pablor21/goms/app/models"
)

func newAssetLibrary(db *gorm.DB, opts ...gen.DOOption) assetLibrary {
	_assetLibrary := assetLibrary{}

	_assetLibrary.assetLibraryDo.UseDB(db, opts...)
	_assetLibrary.assetLibraryDo.UseModel(&models.AssetLibrary{})

	tableName := _assetLibrary.assetLibraryDo.TableName()
	_assetLibrary.ALL = field.NewAsterisk(tableName)
	_assetLibrary.ID = field.NewInt64(tableName, "id")
	_assetLibrary.CreatedAt = field.NewTime(tableName, "created_at")
	_assetLibrary.UpdatedAt = field.NewTime(tableName, "updated_at")
	_assetLibrary.Metadata = field.NewField(tableName, "metadata")
	_assetLibrary.Name = field.NewString(tableName, "name")
	_assetLibrary.Description = field.NewString(tableName, "description")
	_assetLibrary.RootFolderID = field.NewInt64(tableName, "root_folder_id")
	_assetLibrary.RootFolder = assetLibraryBelongsToRootFolder{
		db: db.Session(&gorm.Session{}),

		RelationField: field.NewRelation("RootFolder", "models.AssetFolder"),
		Library: struct {
			field.RelationField
			RootFolder struct {
				field.RelationField
			}
		}{
			RelationField: field.NewRelation("RootFolder.Library", "models.AssetLibrary"),
			RootFolder: struct {
				field.RelationField
			}{
				RelationField: field.NewRelation("RootFolder.Library.RootFolder", "models.AssetFolder"),
			},
		},
		Parent: struct {
			field.RelationField
		}{
			RelationField: field.NewRelation("RootFolder.Parent", "models.AssetFolder"),
		},
		Children: struct {
			field.RelationField
		}{
			RelationField: field.NewRelation("RootFolder.Children", "models.AssetFolder"),
		},
	}

	_assetLibrary.fillFieldMap()

	return _assetLibrary
}

type assetLibrary struct {
	assetLibraryDo

	ALL          field.Asterisk
	ID           field.Int64
	CreatedAt    field.Time
	UpdatedAt    field.Time
	Metadata     field.Field
	Name         field.String
	Description  field.String
	RootFolderID field.Int64
	RootFolder   assetLibraryBelongsToRootFolder

	fieldMap map[string]field.Expr
}

func (a assetLibrary) Table(newTableName string) *assetLibrary {
	a.assetLibraryDo.UseTable(newTableName)
	return a.updateTableName(newTableName)
}

func (a assetLibrary) As(alias string) *assetLibrary {
	a.assetLibraryDo.DO = *(a.assetLibraryDo.As(alias).(*gen.DO))
	return a.updateTableName(alias)
}

func (a *assetLibrary) updateTableName(table string) *assetLibrary {
	a.ALL = field.NewAsterisk(table)
	a.ID = field.NewInt64(table, "id")
	a.CreatedAt = field.NewTime(table, "created_at")
	a.UpdatedAt = field.NewTime(table, "updated_at")
	a.Metadata = field.NewField(table, "metadata")
	a.Name = field.NewString(table, "name")
	a.Description = field.NewString(table, "description")
	a.RootFolderID = field.NewInt64(table, "root_folder_id")

	a.fillFieldMap()

	return a
}

func (a *assetLibrary) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := a.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (a *assetLibrary) fillFieldMap() {
	a.fieldMap = make(map[string]field.Expr, 8)
	a.fieldMap["id"] = a.ID
	a.fieldMap["created_at"] = a.CreatedAt
	a.fieldMap["updated_at"] = a.UpdatedAt
	a.fieldMap["metadata"] = a.Metadata
	a.fieldMap["name"] = a.Name
	a.fieldMap["description"] = a.Description
	a.fieldMap["root_folder_id"] = a.RootFolderID

}

func (a assetLibrary) clone(db *gorm.DB) assetLibrary {
	a.assetLibraryDo.ReplaceConnPool(db.Statement.ConnPool)
	return a
}

func (a assetLibrary) replaceDB(db *gorm.DB) assetLibrary {
	a.assetLibraryDo.ReplaceDB(db)
	return a
}

type assetLibraryBelongsToRootFolder struct {
	db *gorm.DB

	field.RelationField

	Library struct {
		field.RelationField
		RootFolder struct {
			field.RelationField
		}
	}
	Parent struct {
		field.RelationField
	}
	Children struct {
		field.RelationField
	}
}

func (a assetLibraryBelongsToRootFolder) Where(conds ...field.Expr) *assetLibraryBelongsToRootFolder {
	if len(conds) == 0 {
		return &a
	}

	exprs := make([]clause.Expression, 0, len(conds))
	for _, cond := range conds {
		exprs = append(exprs, cond.BeCond().(clause.Expression))
	}
	a.db = a.db.Clauses(clause.Where{Exprs: exprs})
	return &a
}

func (a assetLibraryBelongsToRootFolder) WithContext(ctx context.Context) *assetLibraryBelongsToRootFolder {
	a.db = a.db.WithContext(ctx)
	return &a
}

func (a assetLibraryBelongsToRootFolder) Session(session *gorm.Session) *assetLibraryBelongsToRootFolder {
	a.db = a.db.Session(session)
	return &a
}

func (a assetLibraryBelongsToRootFolder) Model(m *models.AssetLibrary) *assetLibraryBelongsToRootFolderTx {
	return &assetLibraryBelongsToRootFolderTx{a.db.Model(m).Association(a.Name())}
}

type assetLibraryBelongsToRootFolderTx struct{ tx *gorm.Association }

func (a assetLibraryBelongsToRootFolderTx) Find() (result *models.AssetFolder, err error) {
	return result, a.tx.Find(&result)
}

func (a assetLibraryBelongsToRootFolderTx) Append(values ...*models.AssetFolder) (err error) {
	targetValues := make([]interface{}, len(values))
	for i, v := range values {
		targetValues[i] = v
	}
	return a.tx.Append(targetValues...)
}

func (a assetLibraryBelongsToRootFolderTx) Replace(values ...*models.AssetFolder) (err error) {
	targetValues := make([]interface{}, len(values))
	for i, v := range values {
		targetValues[i] = v
	}
	return a.tx.Replace(targetValues...)
}

func (a assetLibraryBelongsToRootFolderTx) Delete(values ...*models.AssetFolder) (err error) {
	targetValues := make([]interface{}, len(values))
	for i, v := range values {
		targetValues[i] = v
	}
	return a.tx.Delete(targetValues...)
}

func (a assetLibraryBelongsToRootFolderTx) Clear() error {
	return a.tx.Clear()
}

func (a assetLibraryBelongsToRootFolderTx) Count() int64 {
	return a.tx.Count()
}

type assetLibraryDo struct{ gen.DO }

type IAssetLibraryDo interface {
	gen.SubQuery
	Debug() IAssetLibraryDo
	WithContext(ctx context.Context) IAssetLibraryDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() IAssetLibraryDo
	WriteDB() IAssetLibraryDo
	As(alias string) gen.Dao
	Session(config *gorm.Session) IAssetLibraryDo
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) IAssetLibraryDo
	Not(conds ...gen.Condition) IAssetLibraryDo
	Or(conds ...gen.Condition) IAssetLibraryDo
	Select(conds ...field.Expr) IAssetLibraryDo
	Where(conds ...gen.Condition) IAssetLibraryDo
	Order(conds ...field.Expr) IAssetLibraryDo
	Distinct(cols ...field.Expr) IAssetLibraryDo
	Omit(cols ...field.Expr) IAssetLibraryDo
	Join(table schema.Tabler, on ...field.Expr) IAssetLibraryDo
	LeftJoin(table schema.Tabler, on ...field.Expr) IAssetLibraryDo
	RightJoin(table schema.Tabler, on ...field.Expr) IAssetLibraryDo
	Group(cols ...field.Expr) IAssetLibraryDo
	Having(conds ...gen.Condition) IAssetLibraryDo
	Limit(limit int) IAssetLibraryDo
	Offset(offset int) IAssetLibraryDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) IAssetLibraryDo
	Unscoped() IAssetLibraryDo
	Create(values ...*models.AssetLibrary) error
	CreateInBatches(values []*models.AssetLibrary, batchSize int) error
	Save(values ...*models.AssetLibrary) error
	First() (*models.AssetLibrary, error)
	Take() (*models.AssetLibrary, error)
	Last() (*models.AssetLibrary, error)
	Find() ([]*models.AssetLibrary, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*models.AssetLibrary, err error)
	FindInBatches(result *[]*models.AssetLibrary, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*models.AssetLibrary) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) IAssetLibraryDo
	Assign(attrs ...field.AssignExpr) IAssetLibraryDo
	Joins(fields ...field.RelationField) IAssetLibraryDo
	Preload(fields ...field.RelationField) IAssetLibraryDo
	FirstOrInit() (*models.AssetLibrary, error)
	FirstOrCreate() (*models.AssetLibrary, error)
	FindByPage(offset int, limit int) (result []*models.AssetLibrary, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) IAssetLibraryDo
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (a assetLibraryDo) Debug() IAssetLibraryDo {
	return a.withDO(a.DO.Debug())
}

func (a assetLibraryDo) WithContext(ctx context.Context) IAssetLibraryDo {
	return a.withDO(a.DO.WithContext(ctx))
}

func (a assetLibraryDo) ReadDB() IAssetLibraryDo {
	return a.Clauses(dbresolver.Read)
}

func (a assetLibraryDo) WriteDB() IAssetLibraryDo {
	return a.Clauses(dbresolver.Write)
}

func (a assetLibraryDo) Session(config *gorm.Session) IAssetLibraryDo {
	return a.withDO(a.DO.Session(config))
}

func (a assetLibraryDo) Clauses(conds ...clause.Expression) IAssetLibraryDo {
	return a.withDO(a.DO.Clauses(conds...))
}

func (a assetLibraryDo) Returning(value interface{}, columns ...string) IAssetLibraryDo {
	return a.withDO(a.DO.Returning(value, columns...))
}

func (a assetLibraryDo) Not(conds ...gen.Condition) IAssetLibraryDo {
	return a.withDO(a.DO.Not(conds...))
}

func (a assetLibraryDo) Or(conds ...gen.Condition) IAssetLibraryDo {
	return a.withDO(a.DO.Or(conds...))
}

func (a assetLibraryDo) Select(conds ...field.Expr) IAssetLibraryDo {
	return a.withDO(a.DO.Select(conds...))
}

func (a assetLibraryDo) Where(conds ...gen.Condition) IAssetLibraryDo {
	return a.withDO(a.DO.Where(conds...))
}

func (a assetLibraryDo) Order(conds ...field.Expr) IAssetLibraryDo {
	return a.withDO(a.DO.Order(conds...))
}

func (a assetLibraryDo) Distinct(cols ...field.Expr) IAssetLibraryDo {
	return a.withDO(a.DO.Distinct(cols...))
}

func (a assetLibraryDo) Omit(cols ...field.Expr) IAssetLibraryDo {
	return a.withDO(a.DO.Omit(cols...))
}

func (a assetLibraryDo) Join(table schema.Tabler, on ...field.Expr) IAssetLibraryDo {
	return a.withDO(a.DO.Join(table, on...))
}

func (a assetLibraryDo) LeftJoin(table schema.Tabler, on ...field.Expr) IAssetLibraryDo {
	return a.withDO(a.DO.LeftJoin(table, on...))
}

func (a assetLibraryDo) RightJoin(table schema.Tabler, on ...field.Expr) IAssetLibraryDo {
	return a.withDO(a.DO.RightJoin(table, on...))
}

func (a assetLibraryDo) Group(cols ...field.Expr) IAssetLibraryDo {
	return a.withDO(a.DO.Group(cols...))
}

func (a assetLibraryDo) Having(conds ...gen.Condition) IAssetLibraryDo {
	return a.withDO(a.DO.Having(conds...))
}

func (a assetLibraryDo) Limit(limit int) IAssetLibraryDo {
	return a.withDO(a.DO.Limit(limit))
}

func (a assetLibraryDo) Offset(offset int) IAssetLibraryDo {
	return a.withDO(a.DO.Offset(offset))
}

func (a assetLibraryDo) Scopes(funcs ...func(gen.Dao) gen.Dao) IAssetLibraryDo {
	return a.withDO(a.DO.Scopes(funcs...))
}

func (a assetLibraryDo) Unscoped() IAssetLibraryDo {
	return a.withDO(a.DO.Unscoped())
}

func (a assetLibraryDo) Create(values ...*models.AssetLibrary) error {
	if len(values) == 0 {
		return nil
	}
	return a.DO.Create(values)
}

func (a assetLibraryDo) CreateInBatches(values []*models.AssetLibrary, batchSize int) error {
	return a.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (a assetLibraryDo) Save(values ...*models.AssetLibrary) error {
	if len(values) == 0 {
		return nil
	}
	return a.DO.Save(values)
}

func (a assetLibraryDo) First() (*models.AssetLibrary, error) {
	if result, err := a.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*models.AssetLibrary), nil
	}
}

func (a assetLibraryDo) Take() (*models.AssetLibrary, error) {
	if result, err := a.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*models.AssetLibrary), nil
	}
}

func (a assetLibraryDo) Last() (*models.AssetLibrary, error) {
	if result, err := a.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*models.AssetLibrary), nil
	}
}

func (a assetLibraryDo) Find() ([]*models.AssetLibrary, error) {
	result, err := a.DO.Find()
	return result.([]*models.AssetLibrary), err
}

func (a assetLibraryDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*models.AssetLibrary, err error) {
	buf := make([]*models.AssetLibrary, 0, batchSize)
	err = a.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (a assetLibraryDo) FindInBatches(result *[]*models.AssetLibrary, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return a.DO.FindInBatches(result, batchSize, fc)
}

func (a assetLibraryDo) Attrs(attrs ...field.AssignExpr) IAssetLibraryDo {
	return a.withDO(a.DO.Attrs(attrs...))
}

func (a assetLibraryDo) Assign(attrs ...field.AssignExpr) IAssetLibraryDo {
	return a.withDO(a.DO.Assign(attrs...))
}

func (a assetLibraryDo) Joins(fields ...field.RelationField) IAssetLibraryDo {
	for _, _f := range fields {
		a = *a.withDO(a.DO.Joins(_f))
	}
	return &a
}

func (a assetLibraryDo) Preload(fields ...field.RelationField) IAssetLibraryDo {
	for _, _f := range fields {
		a = *a.withDO(a.DO.Preload(_f))
	}
	return &a
}

func (a assetLibraryDo) FirstOrInit() (*models.AssetLibrary, error) {
	if result, err := a.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*models.AssetLibrary), nil
	}
}

func (a assetLibraryDo) FirstOrCreate() (*models.AssetLibrary, error) {
	if result, err := a.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*models.AssetLibrary), nil
	}
}

func (a assetLibraryDo) FindByPage(offset int, limit int) (result []*models.AssetLibrary, count int64, err error) {
	result, err = a.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = a.Offset(-1).Limit(-1).Count()
	return
}

func (a assetLibraryDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = a.Count()
	if err != nil {
		return
	}

	err = a.Offset(offset).Limit(limit).Scan(result)
	return
}

func (a assetLibraryDo) Scan(result interface{}) (err error) {
	return a.DO.Scan(result)
}

func (a assetLibraryDo) Delete(models ...*models.AssetLibrary) (result gen.ResultInfo, err error) {
	return a.DO.Delete(models)
}

func (a *assetLibraryDo) withDO(do gen.Dao) *assetLibraryDo {
	a.DO = *do.(*gen.DO)
	return a
}
