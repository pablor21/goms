// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package repositories

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"github.com/pablor21/goms/app/models"
)

func newAsset(db *gorm.DB, opts ...gen.DOOption) asset {
	_asset := asset{}

	_asset.assetDo.UseDB(db, opts...)
	_asset.assetDo.UseModel(&models.Asset{})

	tableName := _asset.assetDo.TableName()
	_asset.ALL = field.NewAsterisk(tableName)
	_asset.ID = field.NewInt64(tableName, "id")
	_asset.CreatedAt = field.NewTime(tableName, "created_at")
	_asset.UpdatedAt = field.NewTime(tableName, "updated_at")
	_asset.Metadata = field.NewField(tableName, "metadata")
	_asset.UniqueID = field.NewString(tableName, "unique_id")
	_asset.Title = field.NewString(tableName, "title")
	_asset.Description = field.NewString(tableName, "description")
	_asset.Section = field.NewString(tableName, "section")
	_asset.Uri = field.NewString(tableName, "uri")
	_asset.StorageName = field.NewString(tableName, "storage_name")
	_asset.MimeType = field.NewString(tableName, "mime_type")
	_asset.OwnerID = field.NewInt64(tableName, "owner_id")
	_asset.OwnerType = field.NewString(tableName, "owner_type")
	_asset.AssetType = field.NewString(tableName, "asset_type")
	_asset.AuthorId = field.NewInt64(tableName, "author_id")
	_asset.TagEntries = assetHasManyTagEntries{
		db: db.Session(&gorm.Session{}),

		RelationField: field.NewRelation("TagEntries", "models.TagEntry"),
		Tag: struct {
			field.RelationField
			Parent struct {
				field.RelationField
			}
			Children struct {
				field.RelationField
			}
		}{
			RelationField: field.NewRelation("TagEntries.Tag", "models.Tag"),
			Parent: struct {
				field.RelationField
			}{
				RelationField: field.NewRelation("TagEntries.Tag.Parent", "models.Tag"),
			},
			Children: struct {
				field.RelationField
			}{
				RelationField: field.NewRelation("TagEntries.Tag.Children", "models.Tag"),
			},
		},
	}

	_asset.Author = assetBelongsToAuthor{
		db: db.Session(&gorm.Session{}),

		RelationField: field.NewRelation("Author", "models.User"),
		Avatar: struct {
			field.RelationField
			Author struct {
				field.RelationField
			}
			TagEntries struct {
				field.RelationField
			}
		}{
			RelationField: field.NewRelation("Author.Avatar", "models.Asset"),
			Author: struct {
				field.RelationField
			}{
				RelationField: field.NewRelation("Author.Avatar.Author", "models.User"),
			},
			TagEntries: struct {
				field.RelationField
			}{
				RelationField: field.NewRelation("Author.Avatar.TagEntries", "models.TagEntry"),
			},
		},
	}

	_asset.fillFieldMap()

	return _asset
}

type asset struct {
	assetDo

	ALL         field.Asterisk
	ID          field.Int64
	CreatedAt   field.Time
	UpdatedAt   field.Time
	Metadata    field.Field
	UniqueID    field.String
	Title       field.String
	Description field.String
	Section     field.String
	Uri         field.String
	StorageName field.String
	MimeType    field.String
	OwnerID     field.Int64
	OwnerType   field.String
	AssetType   field.String
	AuthorId    field.Int64
	TagEntries  assetHasManyTagEntries

	Author assetBelongsToAuthor

	fieldMap map[string]field.Expr
}

func (a asset) Table(newTableName string) *asset {
	a.assetDo.UseTable(newTableName)
	return a.updateTableName(newTableName)
}

func (a asset) As(alias string) *asset {
	a.assetDo.DO = *(a.assetDo.As(alias).(*gen.DO))
	return a.updateTableName(alias)
}

func (a *asset) updateTableName(table string) *asset {
	a.ALL = field.NewAsterisk(table)
	a.ID = field.NewInt64(table, "id")
	a.CreatedAt = field.NewTime(table, "created_at")
	a.UpdatedAt = field.NewTime(table, "updated_at")
	a.Metadata = field.NewField(table, "metadata")
	a.UniqueID = field.NewString(table, "unique_id")
	a.Title = field.NewString(table, "title")
	a.Description = field.NewString(table, "description")
	a.Section = field.NewString(table, "section")
	a.Uri = field.NewString(table, "uri")
	a.StorageName = field.NewString(table, "storage_name")
	a.MimeType = field.NewString(table, "mime_type")
	a.OwnerID = field.NewInt64(table, "owner_id")
	a.OwnerType = field.NewString(table, "owner_type")
	a.AssetType = field.NewString(table, "asset_type")
	a.AuthorId = field.NewInt64(table, "author_id")

	a.fillFieldMap()

	return a
}

func (a *asset) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := a.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (a *asset) fillFieldMap() {
	a.fieldMap = make(map[string]field.Expr, 17)
	a.fieldMap["id"] = a.ID
	a.fieldMap["created_at"] = a.CreatedAt
	a.fieldMap["updated_at"] = a.UpdatedAt
	a.fieldMap["metadata"] = a.Metadata
	a.fieldMap["unique_id"] = a.UniqueID
	a.fieldMap["title"] = a.Title
	a.fieldMap["description"] = a.Description
	a.fieldMap["section"] = a.Section
	a.fieldMap["uri"] = a.Uri
	a.fieldMap["storage_name"] = a.StorageName
	a.fieldMap["mime_type"] = a.MimeType
	a.fieldMap["owner_id"] = a.OwnerID
	a.fieldMap["owner_type"] = a.OwnerType
	a.fieldMap["asset_type"] = a.AssetType
	a.fieldMap["author_id"] = a.AuthorId

}

func (a asset) clone(db *gorm.DB) asset {
	a.assetDo.ReplaceConnPool(db.Statement.ConnPool)
	return a
}

func (a asset) replaceDB(db *gorm.DB) asset {
	a.assetDo.ReplaceDB(db)
	return a
}

type assetHasManyTagEntries struct {
	db *gorm.DB

	field.RelationField

	Tag struct {
		field.RelationField
		Parent struct {
			field.RelationField
		}
		Children struct {
			field.RelationField
		}
	}
}

func (a assetHasManyTagEntries) Where(conds ...field.Expr) *assetHasManyTagEntries {
	if len(conds) == 0 {
		return &a
	}

	exprs := make([]clause.Expression, 0, len(conds))
	for _, cond := range conds {
		exprs = append(exprs, cond.BeCond().(clause.Expression))
	}
	a.db = a.db.Clauses(clause.Where{Exprs: exprs})
	return &a
}

func (a assetHasManyTagEntries) WithContext(ctx context.Context) *assetHasManyTagEntries {
	a.db = a.db.WithContext(ctx)
	return &a
}

func (a assetHasManyTagEntries) Session(session *gorm.Session) *assetHasManyTagEntries {
	a.db = a.db.Session(session)
	return &a
}

func (a assetHasManyTagEntries) Model(m *models.Asset) *assetHasManyTagEntriesTx {
	return &assetHasManyTagEntriesTx{a.db.Model(m).Association(a.Name())}
}

type assetHasManyTagEntriesTx struct{ tx *gorm.Association }

func (a assetHasManyTagEntriesTx) Find() (result []*models.TagEntry, err error) {
	return result, a.tx.Find(&result)
}

func (a assetHasManyTagEntriesTx) Append(values ...*models.TagEntry) (err error) {
	targetValues := make([]interface{}, len(values))
	for i, v := range values {
		targetValues[i] = v
	}
	return a.tx.Append(targetValues...)
}

func (a assetHasManyTagEntriesTx) Replace(values ...*models.TagEntry) (err error) {
	targetValues := make([]interface{}, len(values))
	for i, v := range values {
		targetValues[i] = v
	}
	return a.tx.Replace(targetValues...)
}

func (a assetHasManyTagEntriesTx) Delete(values ...*models.TagEntry) (err error) {
	targetValues := make([]interface{}, len(values))
	for i, v := range values {
		targetValues[i] = v
	}
	return a.tx.Delete(targetValues...)
}

func (a assetHasManyTagEntriesTx) Clear() error {
	return a.tx.Clear()
}

func (a assetHasManyTagEntriesTx) Count() int64 {
	return a.tx.Count()
}

type assetBelongsToAuthor struct {
	db *gorm.DB

	field.RelationField

	Avatar struct {
		field.RelationField
		Author struct {
			field.RelationField
		}
		TagEntries struct {
			field.RelationField
		}
	}
}

func (a assetBelongsToAuthor) Where(conds ...field.Expr) *assetBelongsToAuthor {
	if len(conds) == 0 {
		return &a
	}

	exprs := make([]clause.Expression, 0, len(conds))
	for _, cond := range conds {
		exprs = append(exprs, cond.BeCond().(clause.Expression))
	}
	a.db = a.db.Clauses(clause.Where{Exprs: exprs})
	return &a
}

func (a assetBelongsToAuthor) WithContext(ctx context.Context) *assetBelongsToAuthor {
	a.db = a.db.WithContext(ctx)
	return &a
}

func (a assetBelongsToAuthor) Session(session *gorm.Session) *assetBelongsToAuthor {
	a.db = a.db.Session(session)
	return &a
}

func (a assetBelongsToAuthor) Model(m *models.Asset) *assetBelongsToAuthorTx {
	return &assetBelongsToAuthorTx{a.db.Model(m).Association(a.Name())}
}

type assetBelongsToAuthorTx struct{ tx *gorm.Association }

func (a assetBelongsToAuthorTx) Find() (result *models.User, err error) {
	return result, a.tx.Find(&result)
}

func (a assetBelongsToAuthorTx) Append(values ...*models.User) (err error) {
	targetValues := make([]interface{}, len(values))
	for i, v := range values {
		targetValues[i] = v
	}
	return a.tx.Append(targetValues...)
}

func (a assetBelongsToAuthorTx) Replace(values ...*models.User) (err error) {
	targetValues := make([]interface{}, len(values))
	for i, v := range values {
		targetValues[i] = v
	}
	return a.tx.Replace(targetValues...)
}

func (a assetBelongsToAuthorTx) Delete(values ...*models.User) (err error) {
	targetValues := make([]interface{}, len(values))
	for i, v := range values {
		targetValues[i] = v
	}
	return a.tx.Delete(targetValues...)
}

func (a assetBelongsToAuthorTx) Clear() error {
	return a.tx.Clear()
}

func (a assetBelongsToAuthorTx) Count() int64 {
	return a.tx.Count()
}

type assetDo struct{ gen.DO }

type IAssetDo interface {
	gen.SubQuery
	Debug() IAssetDo
	WithContext(ctx context.Context) IAssetDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() IAssetDo
	WriteDB() IAssetDo
	As(alias string) gen.Dao
	Session(config *gorm.Session) IAssetDo
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) IAssetDo
	Not(conds ...gen.Condition) IAssetDo
	Or(conds ...gen.Condition) IAssetDo
	Select(conds ...field.Expr) IAssetDo
	Where(conds ...gen.Condition) IAssetDo
	Order(conds ...field.Expr) IAssetDo
	Distinct(cols ...field.Expr) IAssetDo
	Omit(cols ...field.Expr) IAssetDo
	Join(table schema.Tabler, on ...field.Expr) IAssetDo
	LeftJoin(table schema.Tabler, on ...field.Expr) IAssetDo
	RightJoin(table schema.Tabler, on ...field.Expr) IAssetDo
	Group(cols ...field.Expr) IAssetDo
	Having(conds ...gen.Condition) IAssetDo
	Limit(limit int) IAssetDo
	Offset(offset int) IAssetDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) IAssetDo
	Unscoped() IAssetDo
	Create(values ...*models.Asset) error
	CreateInBatches(values []*models.Asset, batchSize int) error
	Save(values ...*models.Asset) error
	First() (*models.Asset, error)
	Take() (*models.Asset, error)
	Last() (*models.Asset, error)
	Find() ([]*models.Asset, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*models.Asset, err error)
	FindInBatches(result *[]*models.Asset, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*models.Asset) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) IAssetDo
	Assign(attrs ...field.AssignExpr) IAssetDo
	Joins(fields ...field.RelationField) IAssetDo
	Preload(fields ...field.RelationField) IAssetDo
	FirstOrInit() (*models.Asset, error)
	FirstOrCreate() (*models.Asset, error)
	FindByPage(offset int, limit int) (result []*models.Asset, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) IAssetDo
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (a assetDo) Debug() IAssetDo {
	return a.withDO(a.DO.Debug())
}

func (a assetDo) WithContext(ctx context.Context) IAssetDo {
	return a.withDO(a.DO.WithContext(ctx))
}

func (a assetDo) ReadDB() IAssetDo {
	return a.Clauses(dbresolver.Read)
}

func (a assetDo) WriteDB() IAssetDo {
	return a.Clauses(dbresolver.Write)
}

func (a assetDo) Session(config *gorm.Session) IAssetDo {
	return a.withDO(a.DO.Session(config))
}

func (a assetDo) Clauses(conds ...clause.Expression) IAssetDo {
	return a.withDO(a.DO.Clauses(conds...))
}

func (a assetDo) Returning(value interface{}, columns ...string) IAssetDo {
	return a.withDO(a.DO.Returning(value, columns...))
}

func (a assetDo) Not(conds ...gen.Condition) IAssetDo {
	return a.withDO(a.DO.Not(conds...))
}

func (a assetDo) Or(conds ...gen.Condition) IAssetDo {
	return a.withDO(a.DO.Or(conds...))
}

func (a assetDo) Select(conds ...field.Expr) IAssetDo {
	return a.withDO(a.DO.Select(conds...))
}

func (a assetDo) Where(conds ...gen.Condition) IAssetDo {
	return a.withDO(a.DO.Where(conds...))
}

func (a assetDo) Order(conds ...field.Expr) IAssetDo {
	return a.withDO(a.DO.Order(conds...))
}

func (a assetDo) Distinct(cols ...field.Expr) IAssetDo {
	return a.withDO(a.DO.Distinct(cols...))
}

func (a assetDo) Omit(cols ...field.Expr) IAssetDo {
	return a.withDO(a.DO.Omit(cols...))
}

func (a assetDo) Join(table schema.Tabler, on ...field.Expr) IAssetDo {
	return a.withDO(a.DO.Join(table, on...))
}

func (a assetDo) LeftJoin(table schema.Tabler, on ...field.Expr) IAssetDo {
	return a.withDO(a.DO.LeftJoin(table, on...))
}

func (a assetDo) RightJoin(table schema.Tabler, on ...field.Expr) IAssetDo {
	return a.withDO(a.DO.RightJoin(table, on...))
}

func (a assetDo) Group(cols ...field.Expr) IAssetDo {
	return a.withDO(a.DO.Group(cols...))
}

func (a assetDo) Having(conds ...gen.Condition) IAssetDo {
	return a.withDO(a.DO.Having(conds...))
}

func (a assetDo) Limit(limit int) IAssetDo {
	return a.withDO(a.DO.Limit(limit))
}

func (a assetDo) Offset(offset int) IAssetDo {
	return a.withDO(a.DO.Offset(offset))
}

func (a assetDo) Scopes(funcs ...func(gen.Dao) gen.Dao) IAssetDo {
	return a.withDO(a.DO.Scopes(funcs...))
}

func (a assetDo) Unscoped() IAssetDo {
	return a.withDO(a.DO.Unscoped())
}

func (a assetDo) Create(values ...*models.Asset) error {
	if len(values) == 0 {
		return nil
	}
	return a.DO.Create(values)
}

func (a assetDo) CreateInBatches(values []*models.Asset, batchSize int) error {
	return a.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (a assetDo) Save(values ...*models.Asset) error {
	if len(values) == 0 {
		return nil
	}
	return a.DO.Save(values)
}

func (a assetDo) First() (*models.Asset, error) {
	if result, err := a.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*models.Asset), nil
	}
}

func (a assetDo) Take() (*models.Asset, error) {
	if result, err := a.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*models.Asset), nil
	}
}

func (a assetDo) Last() (*models.Asset, error) {
	if result, err := a.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*models.Asset), nil
	}
}

func (a assetDo) Find() ([]*models.Asset, error) {
	result, err := a.DO.Find()
	return result.([]*models.Asset), err
}

func (a assetDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*models.Asset, err error) {
	buf := make([]*models.Asset, 0, batchSize)
	err = a.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (a assetDo) FindInBatches(result *[]*models.Asset, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return a.DO.FindInBatches(result, batchSize, fc)
}

func (a assetDo) Attrs(attrs ...field.AssignExpr) IAssetDo {
	return a.withDO(a.DO.Attrs(attrs...))
}

func (a assetDo) Assign(attrs ...field.AssignExpr) IAssetDo {
	return a.withDO(a.DO.Assign(attrs...))
}

func (a assetDo) Joins(fields ...field.RelationField) IAssetDo {
	for _, _f := range fields {
		a = *a.withDO(a.DO.Joins(_f))
	}
	return &a
}

func (a assetDo) Preload(fields ...field.RelationField) IAssetDo {
	for _, _f := range fields {
		a = *a.withDO(a.DO.Preload(_f))
	}
	return &a
}

func (a assetDo) FirstOrInit() (*models.Asset, error) {
	if result, err := a.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*models.Asset), nil
	}
}

func (a assetDo) FirstOrCreate() (*models.Asset, error) {
	if result, err := a.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*models.Asset), nil
	}
}

func (a assetDo) FindByPage(offset int, limit int) (result []*models.Asset, count int64, err error) {
	result, err = a.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = a.Offset(-1).Limit(-1).Count()
	return
}

func (a assetDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = a.Count()
	if err != nil {
		return
	}

	err = a.Offset(offset).Limit(limit).Scan(result)
	return
}

func (a assetDo) Scan(result interface{}) (err error) {
	return a.DO.Scan(result)
}

func (a assetDo) Delete(models ...*models.Asset) (result gen.ResultInfo, err error) {
	return a.DO.Delete(models)
}

func (a *assetDo) withDO(do gen.Dao) *assetDo {
	a.DO = *do.(*gen.DO)
	return a
}
